openapi: 3.0.0
servers:
  - description: node-mongo-rest-api-test
    url: https://node-mongo-rest-api-test.onrender.com
info:
  description: This is a simple testing API for login and regester and create , update , delete , read
  version: "1.0.0"
  title: Simple node mongodb rest api test
  contact:
    email: eslamreda542@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: crud api for users
  - name: auth
    description: login and regester api
paths:
  /users:
    get:
      tags:
        - users
      summary: get all users
      operationId: getUsers
      description: get all users
      parameters:
        - in: cookie
          name: ESLAM-AUTH
          schema:
            type: string
          required: true
      responses:
        '200':
          description: get all users
        '403':
          description: Forbedin
        '400':
          description: bad input parameter
  /users/{userId}:
    delete:
      tags:
        - users
      summary: delete user
      operationId: deleteUser
      description: delete User
      parameters:
        - in: cookie
          name: ESLAM-AUTH
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: delete users
        '400':
          description: bad input parameter
        '403':
          description: Forbedin
    patch:
      tags:
        - users
      summary: update user
      operationId: updateUser
      description: update User
      parameters:
        - in: cookie
          name: ESLAM-AUTH
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        description: put the username to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              required:
                - username
      responses:
        '200':
          description: delete users
        '400':
          description: bad input parameter
        '403':
          description: Forbedin
  /auth/register:
    post:
      tags:
        - auth
      summary: register
      operationId: register
      description: register
      requestBody:
        description: put the register data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - email
                - username
                - password
      responses:
        '200':
          description: register
        '403':
          description: Forbedin
        '400':
          description: bad input parameter
  /auth/login:
    post:
      tags:
        - auth
      summary: login
      operationId: login
      description: login
      requestBody:
        description: put the login data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: register
        '403':
          description: Forbedin
        '400':
          description: bad input parameter
        
components:
  schemas:
    users:
      type: object
      required:
        - _id
        - email
        - username
        - __v
      properties:
        _id:
          type: string
          example: d701748f0851
        email:
          type: string
          example: eslamreda542@gmail.com
        username:
          type: string
          example: 'eslam'
        __v:
          type: number
          example: 0